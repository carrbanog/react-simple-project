1 Accordian

export default function Accordian(){
  const [selected, setSelected] = useState(null);

  function handleSingleSelection(){
    console.log("hello");
  }
  return(

  )
}
이 코드는 로컬함수

function handleSingleSelection(){
    console.log("hello");
}

export default function Accordian(){
  const [selected, setSelected] = useState(null);
  return(

  )
}
이 코드는 전역함수

 <div onClick={() => handleSingleSelection(dataItem.id)} className="title">
 이 코드는 함수에 인수(dataItem.id)를 전달할때 사용

 <div onClick={handleSingleSelection} className="title">
 이 코드는 인수를 전달하지않고 함수를 실행시킬때만 사용

<div onClick={handleSingleSelection(dataItem.id)}>
이 코드는 함수를 바로 호출하는 구문으로 렌더링될 때 onClick이랑 상관없이 함수가 즉시 실행
handleSingleSelection() 뒤에 괄호가 붙으면 함수가 바로 실행되기 때문
handleSingleSelection 이렇게 지정하면 참조만 함


props 변경되면 다시 렌더링
const [selected, setSelected] = useState(null);
상태도 변경되면 다시 렌더링 실제dom에서는 상태 변화로인해 화면에 변화가 필요한 부분만 업데이트


  function handleMultiSelection(getCurrentId) {
    let cpyMultiple = [...multiple];
    const findIndexOfCurrentId = cpyMultiple.indexOf(getCurrentId);
    console.log(findIndexOfCurrentId);
    if (findIndexOfCurrentId === -1) {
      cpyMultiple.push(getCurrentId);
    } else {
      console.log(findIndexOfCurrentId);
      cpyMultiple.splice(findIndexOfCurrentId, 1);
    }
    setMultiple(cpyMultiple);
  }
cpyMultiple.indexOf(getCurrentId); cpyMultiple에 getCurrentId를 찾는 함수 없으면 -1 반환

indexOf()함수는 배열순환 함수 배열을 순차적으로 탐색하여 특정 배열이 존재하는지 확인하고 그 값이 처음으로 등장하는 인덱스 반환
아이디가 1, 2, 3을 누르면 1을 렌더링 한 다음 2가 추가로 렌더링 되는게 아닌 1, 2를 새로 추가함
배열은 렌더링해도 변경 x


3 starRating

console.log([Array(noOfStars)])
길이가 10인 배열을 생성 내부에 빈상태로 존재
console.log(...[Array(noOfStars)])
길이가 10인 배열을 생성 내부에 undefiend가 10개 존재

4 imageSlider
비동기 함수는 비동기 작업을 처리하기 위한 함수로, 시간이 오래 걸리는 작업(예: 파일 읽기/쓰기, 네트워크 요청, 데이터베이스 작업 등)을 **블로킹(blocking)**하지 않고 **비동기적(asynchronous)**으로 처리할 수 있게 해줍니다. 자바스크립트에서는 async 키워드를 사용하여 비동기 함수를 정의합니다.

try 블록은 에러가 발생할 가능성이 있는 코드를 안전하게 실행합니다. 코드가 에러 없이 성공하면 try 블록 내부의 코드를 모두 실행하고, 만약 에러가 발생하면 실행을 중단하고 catch 블록으로 넘어갑니다.

const response = await fetch(`${getUrl}?page=${page}&limit=${limit}`);
**fetch**는 URL에서 데이터를 가져오는 비동기 함수입니다. await를 사용하여 데이터를 가져올 때까지 기다립니다.

54번째 줄 currentSlide === imageItem.id
만약 배열의 순서를 기반으로 하는 논리면 currentSlide === index가 더 적합하다.
여기서는 imageItem.id가 문자열이라서 동작 x

6. menu ui

{
  list && list.length ? 
  list.map((listItem, index) => {
    console.log(listItem);
    return(
      <MenuItem item={listItem} key={index} />
    )
  })
  :null
}
map함수를 통해서 MenuItem에 보내면 3개의 객체를 따로 보냄
